// Generated by CoffeeScript 1.6.3
(function() {
  var $, defaults;

  $ = jQuery;

  defaults = {
    progressBar: 'DIV#progressBar',
    parallel: false,
    post: '/api/upload',
    callback: function() {}
  };

  $.fn.extend({
    uploader: function(options) {
      var filesList, settings, uploader, uploaderDrop, uploaderUpload,
        _this = this;
      settings = $.extend(defaults, options);
      filesList = [];
      uploader = function() {
        _this.get(0).addEventListener('drop', uploaderDrop, false);
        return _this.get(0).addEventListener('dragover', function(e) {
          e.preventDefault();
          e.dataTransfer.dropEffect = 'copy';
          return false;
        }, false);
      };
      uploaderDrop = function(e) {
        var file, files, postPath, url, _i, _len;
        e.stopPropagation();
        e.preventDefault();
        url = e.dataTransfer.getData('url');
        if (url) {
          return "url ziehen lassen nicht verbaut :S";
        } else {
          files = e.dataTransfer.files;
          postPath = "function" === typeof settings.post ? settings.post() : settings.post;
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            filesList.push({
              file: file,
              post: postPath
            });
            if (settings.parallel) {
              uploaderUpload();
            }
          }
          if (settings.parallel === false) {
            return uploaderUpload();
          }
        }
      };
      uploaderUpload = function() {
        var file, xhr;
        if (filesList.length) {
          file = filesList.shift();
          console.log("upload: " + file.file.name + ", " + filesList.length + " left");
          xhr = new XMLHttpRequest();
          xhr.open('POST', "" + file.post + "/" + file.file.name, true);
          xhr.upload.onprogress = function(e) {
            var percentLoaded, percentPerByte;
            percentPerByte = 100 / e.total;
            percentLoaded = percentPerByte * e.loaded;
            return ($("" + settings.progressBar + " DIV.progress-bar")).css('width', "" + percentLoaded + "%");
          };
          xhr.onreadystatechange = function() {
            if (4 === this.readyState) {
              settings.callback({
                data: JSON.parse(this.responseText),
                name: file.file.name,
                path: JSON.parse(this.responseText).path
              });
              if (false === settings.parallel) {
                ($("" + settings.progressBar + " DIV.progress-bar")).css('width', "0%");
                return setTimeout(uploaderUpload, 250);
              }
            }
          };
          xhr.setRequestHeader('Content-Type', 'application/octet-stream');
          return xhr.send(file.file);
        }
      };
      return uploader();
    }
  });

}).call(this);
